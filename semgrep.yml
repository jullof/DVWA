rules:

  # XSS (Reflected) – Input directly goes to output 

  - id: php-xss-taint
    languages: [php]
    severity: INFO          # Only warning
    message: |
      Possible XSS: user-input data flows to output without sanitization.
      Make sure to sanitize/encode before echo/print (htmlspecialchars()).
    mode: taint
    metadata:
      cwe: CWE-79
      tags: [xss, php, dvwa]

    # Patter source
    pattern-sources:
      - pattern: $_GET[$K]
      - pattern: $_POST[$K]
      - pattern: $_REQUEST[$K]
      - pattern: $_COOKIE[$K]
      - pattern: $_SERVER['QUERY_STRING']
      - pattern: file_get_contents('php://input')

    # Final destination
    pattern-sinks:
      - pattern: echo $X
      - pattern: print $X
      - pattern: "<?= $X ?>"
      - pattern: printf($F, ..., $X, ...)
      - pattern: vprintf($F, ..., $X, ...)
      - pattern: trigger_error($X, ...)

    # If it is used with these:
    pattern-sanitizers:
      - pattern: htmlspecialchars($X, ...)
      - pattern: htmlentities($X, ...)
      - pattern: htmlspecialchars(strip_tags($X), ..., ...)
      - pattern: filter_var($X, FILTER_SANITIZE_SPECIAL_CHARS, ...)

  # RCE (eval/assert) – Input is treated like a code problem

  - id: php-rce-eval
    languages: [php]
    severity: INFO          # Warning only
    message: |
      Possible RCE: user-input data reaches eval-like sink (eval/assert).
      Avoid evaluating strings; do not create code from user input.
    mode: taint
    metadata:
      cwe: CWE-94
      tags: [rce, php, dvwa]

    pattern-sources:
      - pattern: $_GET[$K]
      - pattern: $_POST[$K]
      - pattern: $_REQUEST[$K]
      - pattern: $_COOKIE[$K]
      - pattern: file_get_contents('php://input')

    pattern-sinks:
      - pattern: eval($X)
      - pattern: assert($X)

  # RCE (OS Command Injection) – User input goes to shell

  - id: php-rce-command
    languages: [php]
    severity: INFO          # Warning only
    message: |
      Possible OS Command Injection: user-input data flows to command execution shell.
      Use strict allowlists and escapeshellarg()/escapeshellcmd() as last resort.
    mode: taint
    metadata:
     
      cwe: CWE-78
      tags: [rce, command-injection, php, dvwa]

    pattern-sources:
      - pattern: $_GET[$K]
      - pattern: $_POST[$K]
      - pattern: $_REQUEST[$K]
      - pattern: $_COOKIE[$K]
      - pattern: file_get_contents('php://input')

    pattern-sinks:
      - pattern: system($X, ...)
      - pattern: exec($X, ...)
      - pattern: shell_exec($X)
      - pattern: passthru($X, ...)
      - pattern: popen($X, ...)
      - pattern: proc_open($X, ...)


    # Possible remediation functions
    pattern-sanitizers:
      - pattern: escapeshellarg($X)
      - pattern: escapeshellcmd($X)
