#!/usr/bin/env python3
# create_issues_grouped.py â€” grouped GH issues with rich markdown
#
# Input : reports/ai_bodies.json, reports/ai_findings.json
# Env   : GH_TOKEN, GITHUB_REPO (owner/repo)
#
import os, sys, json, subprocess, tempfile, textwrap

REPORT_DIR    = os.environ.get("REPORT_DIR", "reports")
BODIES_PATH   = os.path.join(REPORT_DIR, "ai_bodies.json")
ITEMS_PATH    = os.path.join(REPORT_DIR, "ai_findings.json")
REPO          = os.environ.get("GITHUB_REPO")
GH_TOKEN      = os.environ.get("GH_TOKEN") or os.environ.get("GITHUB_TOKEN")

if not (REPO and GH_TOKEN):
    print("GITHUB_REPO or GH_TOKEN missing", file=sys.stderr); sys.exit(1)

def gh(*args, input_text=None):
    env = os.environ.copy()
    env["GH_TOKEN"] = GH_TOKEN
    cmd = ["gh"] + list(args)
    p = subprocess.run(cmd, input=input_text.encode("utf-8") if input_text else None,
                       env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if p.returncode != 0:
        raise RuntimeError(f"gh error: {p.stderr.decode()}")
    return p.stdout.decode().strip()

with open(BODIES_PATH, "r", encoding="utf-8") as f:
    bodies = json.load(f)

with open(ITEMS_PATH, "r", encoding="utf-8") as f:
    items = json.load(f)

BASE_LABELS = ["security", "ai-triage"]

created_urls = []

for group, body in bodies.items():
    if not body.strip():
        continue
    
    title = f"[Security][{group.upper()}] AI triage summary ({sum(1 for _ in body.splitlines() if _.startswith('## '))} items)"
    labels = ",".join(BASE_LABELS + [group])

    extra_hdr = textwrap.dedent(f"""
    > This issue was generated by AI triage. It summarizes grouped findings with **Root cause**, **Proposed remediation**, and **References** per item.
    > Group: **{group}**
    """)

    full_body = extra_hdr + "\n" + body

    url = gh("issue", "create",
             "--repo", REPO,
             "--title", title,
             "--label", labels,
             "--body-file", "-",
             input_text=full_body)
    print(url)
    created_urls.append(url)
